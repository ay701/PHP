1. Scalar types: Coercise and strict
   Can specify parameter types

2. Return types
   function arraysSum(array ...$arrays): array
   { }

3. Null coalescing operator
   <?php
   // Fetches the value of $_GET['user'] and returns 'nobody'
   // if it does not exist.
   $username = $_GET['user'] ?? 'nobody';
   // This is equivalent to:
   $username = isset($_GET['user']) ? $_GET['user'] : 'nobody';

   // Coalescing can be chained: this will return the first
   // defined value out of $_GET['user'], $_POST['user'], and
   // 'nobody'.
   $username = $_GET['user'] ?? $_POST['user'] ?? 'nobody';
   ?>

4. Spaceship operator
   Used to compare two expressions, return -1,0,1

   <?php
   // Integers
   echo 1 <=> 1; // 0
   echo 1 <=> 2; // -1
   echo 2 <=> 1; // 1

   // Floats
   echo 1.5 <=> 1.5; // 0
   echo 1.5 <=> 2.5; // -1
   echo 2.5 <=> 1.5; // 1
 
   // Strings
   echo "a" <=> "a"; // 0
   echo "a" <=> "b"; // -1
   echo "b" <=> "a"; // 1
   ?>
   
5. Constant Array: Define()
   <?php
   define('ANIMALS', [
       'dog',
       'cat',
       'bird'
   ]);

   echo ANIMALS[1]; // outputs "cat"
   ?>

6. Anonymous class

7. Closure::call() 
   Binding an object scope to a closure and invoking it.
   No more Closure::bindTo()
   No more intermediate closure

8. Filtered unserialize()
   It prevents possible code injections by enabling the developer to whitelist classes that can be unserialized.
   
9. assert() function can be customalized with exception / expectation
   assert_options() and we can setup callback

   // PHP 5 Handle a failed assertion with a custom handler
   <?php
   // Active assert and make it quiet
   assert_options(ASSERT_ACTIVE, 1);
   assert_options(ASSERT_WARNING, 0);
   assert_options(ASSERT_QUIET_EVAL, 1);

   // Create a handler function
   function my_assert_handler($file, $line, $code, $desc = null)
   {
      echo "Assertion failed at $file:$line: $code";
      if ($desc) {
          echo ": $desc";
      }
      echo "\n";
   }

   // Set up the callback
   assert_options(ASSERT_CALLBACK, 'my_assert_handler');

   // Make an assertion that should fail
   assert('2 < 1');
   assert('2 < 1', 'Two is less than one');
   ?>

   // PHP 7, Expectations with a custom exception
   <?php
   class CustomError extends AssertionError {}

   assert(true == false, new CustomError('True is not false!'));
   echo 'Hi!';
   ?>

10. Group use declaration / Namespace

    Classes, functions and constants being imported from the same namespace can now be grouped together in a single use statement.

    <?php
    // Pre PHP 7 code
    use some\namespace\ClassA;
    use some\namespace\ClassB;
    use some\namespace\ClassC as C;

    use function some\namespace\fn_a;
    use function some\namespace\fn_b;
    use function some\namespace\fn_c;

    use const some\namespace\ConstA;
    use const some\namespace\ConstB;
    use const some\namespace\ConstC;

    // PHP 7+ code
    use some\namespace\{ClassA, ClassB, ClassC as C};
    use function some\namespace\{fn_a, fn_b, fn_c};
    use const some\namespace\{ConstA, ConstB, ConstC};
    ?>

11. Generator can use getReturn() funtion to get return result

12. Integer division with intdiv() 
    The new intdiv() function performs an integer division of its operands and returns it.

    <?php
    var_dump(intdiv(10, 3));
    ?>
    
    // output int(3)

13. session_start() accepts an array of options
